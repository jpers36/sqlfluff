# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 5d503776245af71e84cb00d1487c4f06f0b6ab9d6307478e0a84d9207a693262
file:
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: add
    - base:
        bracketed:
        - start_bracket: (
        - data_type:
            data_type_identifier: integer
        - comma: ','
        - data_type:
            data_type_identifier: integer
        - end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: integer
    - base:
      - keyword: AS
      - literal: "'select $1 + $2;'"
      - keyword: LANGUAGE
      - parameter: SQL
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - binary_operator: OR
    - keyword: REPLACE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: increment
    - base:
        bracketed:
          start_bracket: (
          parameter: i
          data_type:
            data_type_identifier: integer
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: integer
    - base:
      - keyword: AS
      - literal: "'\n    BEGIN\n        RETURN i + 1;\n    END;\n'"
      - keyword: LANGUAGE
      - parameter: plpgsql
      - keyword: VOLATILE
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - binary_operator: OR
    - keyword: REPLACE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: increment
    - base:
        bracketed:
          start_bracket: (
          parameter: i
          data_type:
            data_type_identifier: integer
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: integer
    - base:
      - keyword: AS
      - literal: "'\n    BEGIN\n        RETURN i + 1;\n    END;\n'"
      - keyword: LANGUAGE
      - parameter: plpgsql
      - keyword: WINDOW
      - keyword: IMMUTABLE
      - keyword: STABLE
      - keyword: LEAKPROOF
      - keyword: RETURNS
      - keyword: 'NULL'
      - keyword: 'ON'
      - keyword: 'NULL'
      - keyword: INPUT
      - keyword: EXTERNAL
      - keyword: SECURITY
      - keyword: DEFINER
      - keyword: ROWS
      - literal: '5'
      - keyword: SET
      - parameter: test_param
      - comparison_operator: '='
      - literal: '3'
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - binary_operator: OR
    - keyword: REPLACE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: increment
    - base:
        bracketed:
          start_bracket: (
          parameter: i
          data_type:
            data_type_identifier: integer
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: integer
    - base:
      - keyword: AS
      - literal: "'C:\\\\my_file.c'"
      - comma: ','
      - literal: "'symlink_c'"
      - keyword: LANGUAGE
      - parameter: plpgsql
      - keyword: WINDOW
      - keyword: IMMUTABLE
      - keyword: STABLE
      - keyword: NOT
      - keyword: LEAKPROOF
      - keyword: CALLED
      - keyword: 'ON'
      - keyword: 'NULL'
      - keyword: INPUT
      - keyword: EXTERNAL
      - keyword: SECURITY
      - keyword: DEFINER
      - keyword: COST
      - literal: '123'
      - keyword: ROWS
      - literal: '5'
      - keyword: SET
      - parameter: test_param
      - comparison_operator: '='
      - literal: '3'
      - keyword: WITH
      - bracketed:
          start_bracket: (
          parameter: isStrict
          end_bracket: )
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - binary_operator: OR
    - keyword: REPLACE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: increment
    - base:
        bracketed:
          start_bracket: (
          parameter: i
          data_type:
            data_type_identifier: integer
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: integer
    - base:
      - keyword: PARALLEL
      - keyword: UNSAFE
      - keyword: AS
      - literal: "$$\n    BEGIN\n        RETURN i + 1;\n    END;\n$$"
      - keyword: LANGUAGE
      - parameter: plpgsql
      - keyword: SUPPORT
      - parameter: my_function
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: add
    - base:
        bracketed:
        - start_bracket: (
        - data_type:
            data_type_identifier: integer
        - comma: ','
        - data_type:
            data_type_identifier: integer
        - end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: integer
    - base:
      - keyword: AS
      - literal: "'select $1 + $2;'"
      - keyword: LANGUAGE
      - parameter: SQL
      - keyword: IMMUTABLE
      - keyword: RETURNS
      - keyword: 'NULL'
      - keyword: 'ON'
      - keyword: 'NULL'
      - keyword: INPUT
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - binary_operator: OR
    - keyword: REPLACE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: increment
    - base:
        bracketed:
          start_bracket: (
          parameter: i
          data_type:
            data_type_identifier: integer
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: integer
    - base:
      - keyword: AS
      - literal: "$$\n        BEGIN\n                RETURN i + 1;\n        END;\n\
          $$"
      - keyword: LANGUAGE
      - parameter: plpgsql
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: dup
    - base:
        bracketed:
        - start_bracket: (
        - keyword: in
        - data_type:
            data_type_identifier: int
        - comma: ','
        - keyword: out
        - parameter: f1
        - data_type:
            data_type_identifier: int
        - comma: ','
        - keyword: out
        - parameter: f2
        - data_type:
            data_type_identifier: text
        - end_bracket: )
    - base:
      - keyword: AS
      - literal: "$$ SELECT $1, CAST($1 AS text) || ' is text' $$"
      - keyword: LANGUAGE
      - parameter: SQL
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              function:
                function_name:
                  function_name_identifier: dup
                bracketed:
                  start_bracket: (
                  expression:
                    literal: '42'
                  end_bracket: )
- statement_terminator: ;
- statement:
    create_type_statement:
    - keyword: CREATE
    - keyword: TYPE
    - object_reference:
        identifier: dup_result
    - keyword: AS
    - bracketed:
      - start_bracket: (
      - raw: f1
      - raw: int
      - comma: ','
      - raw: f2
      - raw: text
      - end_bracket: )
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: dup
    - base:
        bracketed:
          start_bracket: (
          data_type:
            data_type_identifier: int
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: dup_result
    - base:
      - keyword: AS
      - literal: "$$ SELECT $1, CAST($1 AS text) || ' is text' $$"
      - keyword: LANGUAGE
      - parameter: SQL
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              function:
                function_name:
                  function_name_identifier: dup
                bracketed:
                  start_bracket: (
                  expression:
                    literal: '42'
                  end_bracket: )
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: dup
    - base:
        bracketed:
          start_bracket: (
          data_type:
            data_type_identifier: int
          end_bracket: )
    - keyword: RETURNS
    - keyword: TABLE
    - bracketed:
      - start_bracket: (
      - parameter: f1
      - data_type:
          data_type_identifier: int
      - comma: ','
      - parameter: f2
      - data_type:
          data_type_identifier: text
      - end_bracket: )
    - base:
      - keyword: AS
      - literal: "$$ SELECT $1, CAST($1 AS text) || ' is text' $$"
      - keyword: LANGUAGE
      - parameter: SQL
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              function:
                function_name:
                  function_name_identifier: dup
                bracketed:
                  start_bracket: (
                  expression:
                    literal: '42'
                  end_bracket: )
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: check_password
    - base:
        bracketed:
        - start_bracket: (
        - parameter: uname
        - data_type:
            data_type_identifier: TEXT
        - comma: ','
        - parameter: pass
        - data_type:
            data_type_identifier: TEXT
        - end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: BOOLEAN
    - base:
      - keyword: AS
      - literal: "$$\nDECLARE passed BOOLEAN;\nBEGIN\n        SELECT  (pwd = $2) INTO\
          \ passed\n        FROM    pwds\n        WHERE   username = $1;\n\n     \
          \   RETURN passed;\nEND;\n$$"
      - keyword: LANGUAGE
      - parameter: plpgsql
      - keyword: SECURITY
      - keyword: DEFINER
      - keyword: SET
      - parameter: search_path
      - comparison_operator: '='
      - parameter: admin
      - comma: ','
      - parameter: pg_temp
- statement_terminator: ;
- statement:
    transaction_statement:
      keyword: BEGIN
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: check_password
    - base:
        bracketed:
        - start_bracket: (
        - parameter: uname
        - data_type:
            data_type_identifier: TEXT
        - comma: ','
        - parameter: pass
        - data_type:
            data_type_identifier: TEXT
        - end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: BOOLEAN
    - base:
      - keyword: AS
      - literal: "$$\nDECLARE passed BOOLEAN;\nBEGIN\n        SELECT  (pwd = $2) INTO\
          \ passed\n        FROM    pwds\n        WHERE   username = $1;\n\n     \
          \   RETURN passed;\nEND;\n$$"
      - keyword: LANGUAGE
      - parameter: plpgsql
      - keyword: SECURITY
      - keyword: DEFINER
- statement_terminator: ;
- statement:
    access_statement:
    - keyword: REVOKE
    - keyword: ALL
    - keyword: 'ON'
    - keyword: FUNCTION
    - object_reference:
        identifier: check_password
    - base:
        bracketed:
        - start_bracket: (
        - parameter: uname
        - data_type:
            data_type_identifier: TEXT
        - comma: ','
        - parameter: pass
        - data_type:
            data_type_identifier: TEXT
        - end_bracket: )
    - keyword: FROM
    - object_reference:
        identifier: PUBLIC
- statement_terminator: ;
- statement:
    access_statement:
    - keyword: GRANT
    - keyword: EXECUTE
    - keyword: 'ON'
    - keyword: FUNCTION
    - object_reference:
        identifier: check_password
    - base:
        bracketed:
        - start_bracket: (
        - parameter: uname
        - data_type:
            data_type_identifier: TEXT
        - comma: ','
        - parameter: pass
        - data_type:
            data_type_identifier: TEXT
        - end_bracket: )
    - keyword: TO
    - object_reference:
        identifier: admins
- statement_terminator: ;
- statement:
    transaction_statement:
      keyword: COMMIT
- statement_terminator: ;
